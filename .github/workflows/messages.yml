name: Validate Messages

on:
  push:
    branches: [ 'latest-stable', 'develop' ]
  pull_request:
    branches: [ 'latest-stable', 'develop' ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install ResourceBundle
        run: python -m pip install ResourceBundle
      - name: Install yaml
        run: python -m pip install PyYAML
      - name: Run Python script
        uses: jannekem/run-python-script-action@v1
        with:
          script: |
            import ResourceBundle
            import collections
            import yaml
            
            from os.path import isfile
            from os.path import isdir
            from yaml.loader import BaseLoader
            
            
            class InconsistentKeysError(Exception):
                def __init__(self, plugin: str, base_lang: str, current_lang: str) -> None:
                    super().__init__(f'Found inconsistent keys in plugin \'{plugin}\'. '
                                     f'Comparing \'{base_lang}\' and \'{current_lang}\'!')
            
            
            class MissingLanguageFileError(Exception):
                def __init__(self, plugin: str, lang: str) -> None:
                    super().__init__(f'Found no \'{lang}\'-language file for plugin \'{plugin}\'.')
            
            
            class MissingPluginFolderError(Exception):
                def __init__(self, plugin: str) -> None:
                    super().__init__(f'Found no folder for plugin \'{plugin}\'.')
            
            
            def main() -> None:
                with open('settings.yml', 'r') as f:
                    config: dict = dict(list(yaml.load_all(f, Loader=BaseLoader))[0])
                    plugins: list = config.get('plugins')
                    languages: list = config.get('languages')
            
                    for plugin in plugins:
                        if not isdir(f'{plugin}'):
                            raise MissingPluginFolderError(plugin)
            
                        base_lang: str = languages[0]
                        bundle_en = ResourceBundle.get_bundle('messages', base_lang, path=plugin)
            
                        for i in range(1, len(languages)):
                            current_lang: str = languages[i]
                            if not isfile(f'{plugin}/messages_{current_lang}.properties'):
                                raise MissingLanguageFileError(plugin, current_lang)
            
                            bundle_current = ResourceBundle.get_bundle('messages', current_lang, path=plugin)
                            if collections.Counter(bundle_en.keys()) != collections.Counter(bundle_current.keys()):
                                raise InconsistentKeysError(plugin, base_lang, current_lang)
                print('Message bundle validation succeeded!')
            
            
            if __name__ == '__main__':
                main()